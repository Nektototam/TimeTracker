import React, { useState, useEffect, useMemo } from 'react';
import { useCustomProjectTypes } from '../hooks/useCustomProjectTypes';
import { useAuth } from '../contexts/AuthContext';
import { useTimer } from '../contexts/TimerContext';
import { useTranslation } from 'react-i18next';
import { Button } from './ui/Button';

interface ProjectOption {
  value: string;
  label: string;
}

interface ProjectSelectProps {
  value: string;
  onChange: (value: string) => void;
}

export default function ProjectSelect({ value, onChange }: ProjectSelectProps) {
  const { user } = useAuth();
  const { projectTypes, isLoading, addProjectType } = useCustomProjectTypes(user?.id);
  const { switchProject, setTimeLimit, timeLimit, setProjectText, projectText } = useTimer();
  const { t } = useTranslation();
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç, –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const standardProjectOptions = useMemo(() => [
    { value: 'development', label: t('timer.standard.development') },
    { value: 'design', label: t('timer.standard.design') },
    { value: 'marketing', label: t('timer.standard.marketing') },
    { value: 'meeting', label: t('timer.standard.meeting') },
    { value: 'other', label: t('timer.standard.other') },
    { value: 'new', label: t('timer.standard.new') },
  ], [t]);
  
  const [isAddingNewType, setIsAddingNewType] = useState(false);
  const [newTypeValue, setNewTypeValue] = useState('');
  const [isEditingTimeLimit, setIsEditingTimeLimit] = useState(false);
  const [timeLimitHours, setTimeLimitHours] = useState(8); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —á–∞—Å–æ–≤
  const [timeLimitMinutes, setTimeLimitMinutes] = useState(0); // 0 –º–∏–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
  const customOptions: ProjectOption[] = projectTypes.map(type => ({
    value: type.id as string,
    label: type.name
  }));
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π, –≤–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã
  const allOptions = useMemo(() => [
    ...standardProjectOptions.slice(0, -1), // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø"
    ...customOptions,
    standardProjectOptions[standardProjectOptions.length - 1] // –î–æ–±–∞–≤–ª—è–µ–º "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø" –≤ –∫–æ–Ω–µ—Ü
  ], [standardProjectOptions, customOptions]);

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ü–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ development
  useEffect(() => {
    if (!isLoading && value !== 'new' && !allOptions.some(option => option.value === value)) {
      onChange('development');
    }
  }, [isLoading, value, allOptions, onChange]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const handleProjectChange = async (selectedValue: string) => {
    console.log('–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', selectedValue);
    
    if (selectedValue === 'new') {
      setIsAddingNewType(true);
      return;
    }
    
    setIsAddingNewType(false);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const selectedOption = allOptions.find(opt => opt.value === selectedValue);
    if (selectedOption) {
      console.log('–ù–∞–π–¥–µ–Ω–∞ –æ–ø—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', selectedOption.label);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
      onChange(selectedValue);
      switchProject(selectedValue, selectedOption.label);
      console.log('–°—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç:', selectedOption.label);
    } else {
      onChange(selectedValue);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedValue = e.target.value;
    handleProjectChange(selectedValue);
  };

  const handleNewTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewTypeValue(e.target.value);
  };

  const handleNewTypeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newTypeValue.trim() || !user) return;
    
    try {
      const newType = await addProjectType(newTypeValue.trim(), user.id);
      
      if (newType && newType.id) {
        // –°—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ç–∏–ø
        onChange(newType.id);
        switchProject(newType.id, newType.name);
      }
      
      setIsAddingNewType(false);
      setNewTypeValue('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞:', error);
    }
  };

  const handleCancelNewType = () => {
    setIsAddingNewType(false);
    const newValue = value !== 'new' ? value : 'development';
    onChange(newValue);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    const selectedOption = allOptions.find(opt => opt.value === newValue);
    if (selectedOption) {
      setProjectText(selectedOption.label);
    } else {
      setProjectText('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'); // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    setNewTypeValue('');
  };
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  const showTimeLimitEditor = () => {
    setIsEditingTimeLimit(true);
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if (timeLimit) {
      setTimeLimitHours(Math.floor(timeLimit / 3600000));
      setTimeLimitMinutes(Math.floor((timeLimit % 3600000) / 60000));
    }
  };
  
  const handleTimeLimitSave = () => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const limitMs = (timeLimitHours * 60 * 60 * 1000) + (timeLimitMinutes * 60 * 1000);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
    if (limitMs > 0) {
      console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:', formatTime(limitMs));
      setTimeLimit(limitMs);
    } else {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ 0—á –∏ 0–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ 0 –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä');
      return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    setIsEditingTimeLimit(false);
  };
  
  const handleTimeLimitCancel = () => {
    setIsEditingTimeLimit(false);
  };
  
  const clearTimeLimit = () => {
    setTimeLimit(null);
  };
  
  // –ß–∞—Å—ã —Å —à–∞–≥–æ–º 0.5
  const hourOptions = [];
  for (let i = 0; i <= 24; i += 0.5) {
    hourOptions.push(i);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatTime = (ms: number) => {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    return `${hours}—á ${minutes}–º–∏–Ω`;
  };

  return (
    <div className="select-container">
      {/* –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º */}
      <div className="current-task mb-3 text-center">
        <div className="text-sm text-gray-500">{t('timer.currentTask')}:</div>
        <div className="text-lg font-semibold">{projectText || t('timer.notSelected')}</div>
      </div>
      
      <div className="flex justify-between items-center mb-2">
        <label className="select-label">
          {t('timer.workType')}:
        </label>
        {timeLimit !== null ? (
          <div className="flex items-center">
            <span className="time-limit-badge text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-md mr-2">
              {t('timer.limitValue')} {Math.floor(timeLimit / 3600000)}—á {Math.floor((timeLimit % 3600000) / 60000)}–º
            </span>
            <Button 
              onClick={showTimeLimitEditor}
              variant="ghost"
              size="icon"
              className="text-blue-600"
            >
              üìù
            </Button>
            <Button 
              onClick={clearTimeLimit}
              variant="ghost"
              size="icon"
              className="text-red-600"
            >
              ‚ùå
            </Button>
          </div>
        ) : (
          <Button 
            onClick={showTimeLimitEditor}
            variant="outline"
            size="sm"
            rounded="none"
            className="border border-gray-300 bg-white"
          >
            {t('timer.addLimitation')}
          </Button>
        )}
      </div>
      
      {isAddingNewType ? (
        <form onSubmit={handleNewTypeSubmit} className="new-type-form">
          <div className="flex gap-2 items-center">
            <input
              type="text"
              value={newTypeValue}
              onChange={handleNewTypeChange}
              className="select-input flex-1"
              placeholder={t('timer.timeLimit.enterValue')}
              autoFocus
            />
            <Button 
              type="submit"
              variant="primary"
              size="sm"
              rounded="lg"
            >
              ‚úì
            </Button>
            <Button 
              type="button"
              variant="outline"
              size="sm"
              rounded="lg"
              onClick={handleCancelNewType}
            >
              ‚úï
            </Button>
          </div>
        </form>
      ) : isEditingTimeLimit ? (
        <div className="time-limit-form p-3 bg-white rounded-lg shadow-md">
          <div className="mb-2 font-medium text-gray-700 text-sm">{t('timer.timeLimit.setLimit')}</div>
          <div className="flex flex-row gap-2 mb-3 justify-center">
            <div className="w-24">
              <label className="block text-xs text-gray-600 mb-1">{t('timer.hours')}</label>
              <select
                value={timeLimitHours}
                onChange={(e) => setTimeLimitHours(parseFloat(e.target.value))}
                className="w-full p-2 border border-gray-300 rounded text-sm"
              >
                {hourOptions.map(hour => (
                  <option key={hour} value={hour}>{hour}</option>
                ))}
              </select>
            </div>
            <div className="w-24">
              <label className="block text-xs text-gray-600 mb-1">{t('timer.minutes')}</label>
              <select
                value={timeLimitMinutes}
                onChange={(e) => setTimeLimitMinutes(parseInt(e.target.value))}
                className="w-full p-2 border border-gray-300 rounded text-sm"
              >
                {[0, 15, 30, 45].map(minute => (
                  <option key={minute} value={minute}>{minute}</option>
                ))}
              </select>
            </div>
          </div>
          <div className="flex justify-center gap-2">
            <Button
              variant="outline"
              onClick={handleTimeLimitSave}
              size="sm"
            >
              {t('save')}
            </Button>
            <Button
              variant="outline"
              onClick={handleTimeLimitCancel}
              size="sm"
            >
              {t('cancel')}
            </Button>
          </div>
        </div>
      ) : (
        <select
          className="select-input w-full"
          value={value}
          onChange={handleChange}
          disabled={isLoading}
        >
          {allOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      )}
    </div>
  );
} 